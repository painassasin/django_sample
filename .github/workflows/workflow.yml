name: ci/cd

on: push

env:
  PYTHON_VERSION: '3.13'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17.1-alpine
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Python and Poetry environment
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Run tests
        run: |
          cp .github/.env.ci .env
          coverage run manage.py test --shuffle
          coverage report
          coverage xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Python and Poetry environment
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Run lints
        run: |
          ruff check .
          ruff format --check .

  build:
    runs-on: ubuntu-latest
    needs: [ lint, test ]
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_APP }}:latest
            ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_APP }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    environment: staging
    needs: [ build ]
    if: github.ref_name == 'main' || vars.DEPLOY_STAGE_ANY_BRANCH == 'true'
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Create .env file
        run: |
          cat > .env << EOF
          # Base settings
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DEBUG=${{ vars.DEBUG }}
          ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
          # Database
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_HOST=${{ vars.DB_HOST }}
          DB_PORT=${{ vars.DB_PORT }}
          # Mail settings
          EMAIL_TO_CONSOLE=${{ vars.EMAIL_TO_CONSOLE }}
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}
          EMAIL_USE_SSL=${{ secrets.EMAIL_USE_SSL }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          # REDIS
          REDIS_HOST=${{ vars.REDIS_HOST }}
          REDIS_PORT=${{ vars.REDIS_PORT }}
          # Celery
          CELERY_DB=${{ vars.CELERY_DB }}
          CELERY_WORKER_CONCURRENCY=${{ vars.CELERY_WORKER_CONCURRENCY }}
          # Docker
          APP_IMAGE=${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_APP }}:${{ github.sha }}
          APP_PORT=${{ vars.APP_PORT }}
          EOF
      - name: Prepare deployment files
        run: cp docker-compose.prod.yml docker-compose.yml
      - name: Copy files to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ vars.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: ".env,docker-compose.yml,nginx.conf"
          target: ${{ vars.SERVER_PATH }}
          overwrite: true
      - name: Deploy application
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ vars.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ vars.SERVER_PATH }}
            docker pull ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_APP }}:${{ github.sha }}
            docker compose down -t 10
            docker compose up -d --wait
      - name: Cleanup
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ vars.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            docker system prune -a -f
