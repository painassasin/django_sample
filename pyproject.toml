[project]
name = "config"
version = "0.1.0"
description = ""
authors = [
    { name = "Vadim Meshcheryakov", email = "painassasin@icloud.com" }
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "django (>=5.2.5,<6.0.0)",
    "environs (>=14.3.0,<15.0.0)",
    "psycopg2 (>=2.9.10,<3.0.0)",
    "redis (>=6.4.0,<7.0.0)",
    "celery (>=5.5.3,<6.0.0)",
    "gunicorn (>=23.0.0,<24.0.0)"
]

[tool.poetry]
packages = []


[tool.poetry.group.lint.dependencies]
ruff = "^0.12.9"


[tool.poetry.group.test.dependencies]
coverage = "^7.10.4"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
target-version = "py312"
line-length = 100
respect-gitignore = true
exclude = [".git", ".ruff_cache", ".venv", "venv"]


[tool.ruff.format]
quote-style = "single"
indent-style = "space"
line-ending = "lf"
skip-magic-trailing-comma = false

[tool.ruff.lint]
ignore = [
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "CPY001", # Missing copyright notice at top of file
    "D", # Rules about docstrings
    "DOC", # Rules about docstrings
    "DJ008", # Model does not define `__str__` method"
    "EM101", # Exception must not use a string literal, assign to variable first
    "TRY003", # Avoid specifying long messages outside the exception class
    "COM812", # Trailing comma missing
    "RUF001", # String contains ambiguous `с`
    "RUF002", # Docstring contains ambiguous letter
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]
select = ["ALL"]
preview = true

[tool.ruff.lint.per-file-ignores]
"*/migrations/*" = [
    "E501", # Line too long
]
"*/tests/*" = [
    "ANN201", # Missing return type annotation for public function
    "ARG002", # Unused method argument
    "PT", # Use pytest instead of unittests
]
"**/__init__.py" = [
    "F403", # Import * used; unable to detect undefined names
]


[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"


[tool.coverage.run]
source = ["."]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/__pycache__/*",
    ".venv/*",
    "*/asgi.py",
    "*/wsgi.py",
    "manage.py",
]

[tool.coverage.report]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/__pycache__/*",
    ".venv/*",
    "*/asgi.py",
    "*/wsgi.py",
    "manage.py",
]
show_missing = true
skip_covered = true
fail_under = 90